// APPLYING GRID
//
// .sgrid(); this mixin would add {margin: 0 auto; width: (defined in .sgrid_setup - first line in layout.less); .clearfix();} and lets you use .col()   
// you can apply it to one or several elements on web page
//
// .col(); - gives width property to element and adds padding to left and right sides,
// maximum amount of columns is indicated first line of layout.less, just after width
// in our case maximun amount of colums is 12
// Example: if we have .sgrid_setup(984px (width), 12 (number of colums), 24px (gap)); in layout.less
// and will assign .col(3); to random tag we will get element with {padding-left: 12px; padding-right: 12px; width: 222px;}
// or use @unit*(1-12) eg: @unit*2 width equals .col(2) width +@gap;

// FONT SIZE redefining 
//
// if parent tag has base font size
// use .fs(...px); Example .fs(30px);
//
// if parent tag font size was redefined
// use .fs(...px, parent tag font size); Example .fs(18px,30px); 
//
// LINE HEIGHT redefining
// use .line(...px); Example: .line(35px); Notice: it would set line-height: 42px; if website vertical rhythm is 21px .line(35px) would be rounded to nearest integer vertical rhythm value.
// use .line_em(...px); if you want to set line-height in "em"; Notice: the same as for .line(...px);
// or use @rhythm variable, its very easy to mantain vertical rhythm using it, you can do whatever math you want to change its value. Example: line-height: @rhythm*2; would change line-height value to 42px if vertical rhythm is 21px.  

//   USEFULL MIXINS
//
// WRAP
//  .row(); --- { .util_clearfix(); width: 100%; position: relative;} wraps columns
//
// EQUAL COLUMS
//  .equal_col_wrap(); --- { overflow: hidden; display:block; position:relative;}
//  .equal_col() ---  { padding-bottom:32767px; margin-bottom:-32767px;}
//  .equal_col_remove() --- { padding-bottom: 0; margin-bottom: 0;}
//
// SHIFT, PREPEND, APPEND  
// .shift_right(@count) --- {left: @count * @width / @columns; position:relative;}, .shitf_left(@count)...
// Shifts column to `@count` units use it in pair with floats to swap columns
// .unshift() --- {left: 0; right: 0;} remove shift. Use it in mobile styles to remove shifts
// .prepend(@count, @fix: 0px) --- {margin-left: @count * @width / @columns + @fix;} margin left in columns
// .append(@count, @fix: 0px) --- {margin-fight: @count * @width / @columns + @fix;} margin right in columns
// .unprepend() --- {margin-left: 0;} .unappend() {margin-right: 0;}
//
// PULL, PUSH, RIZE, SINC
// .pull(@step, @fix: 0px) --- { margin-top: @step * @rhythm + @fix;} 
// .push(@step, @fix: 0px) --- { margin-bottom: @step * @rhythm + @fix;}
// .rise(@step, @fix: 0px) --- { margin-top: - @step * @rhythm + @fix;}
// .sink(@step, @fix: 0px) --- { margin-bottom: - @step * @rhythm + @fix;}

//
// COLUMNS FLOAT 
// .left() --- {float: left;} floats colunt left
// .right() --- {margin-left: -5px; float: right;} floats colunt right
//
// TO ADD OR DELETE GAPS
// .gaps() --- { padding-left: @gap_2; padding-right: @gap_2;}
// .no_gaps() --- { padding-left: 0; padding-right: 0;}

// HERE WE DEFINE SOME MORE USEFULL MIXINS:

//LAYOUT MIXINS
.border_box { box-sizing: border-box;}
.fl { float: left;}
.fr { float: right;}

// RESET MIXIN
.list_reset { margin: 0; padding: 0;  
  li { list-style: none;}
}

// DESIGN MIXINS
.triangle {
    border-bottom: 3px solid transparent;
    border-left: 6px solid @triangle_color; //you can change its color in layout.less
    border-top: 3px solid transparent;
    display: inline-block;
    vertical-align: 8%;
    padding-right: 4px;
    height: 0;
    width: 0;
}

// DECOR 
.light_text_shadow (@opacity:50%){ text-shadow: 0px 1px 0px fadeout(#fff, @opacity);}
.dark_text_shadow (@opacity:50%){ text-shadow: 0px 1px 0px fadeout(#000, @opacity);}
